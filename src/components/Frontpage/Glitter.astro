<canvas id="glitter"></canvas>

<script>
	let glitterStarted = false

	const snowfall: {
		canvas: HTMLCanvasElement
		context: CanvasRenderingContext2D
		snowflake: new () => {
			size: number
			x: number
			baseX: number
			distance: number
			opacity: number
			radians: number
			fallSpeed: number
			y: number
			draw: () => void
		}
		setup: () => void
		animate: () => void
		flakes: Array<InstanceType<typeof snowfall.snowflake>>
	} = {} as any

	snowfall.canvas = document.getElementById("glitter") as HTMLCanvasElement
	snowfall.context = snowfall.canvas.getContext("2d") as CanvasRenderingContext2D

	// Snowflake constructor
	snowfall.snowflake = class {
		size: number
		x: number
		baseX: number
		distance: number
		opacity: number
		radians: number
		fallSpeed: number
		y: number

		constructor() {
			this.size = Math.random() * 1.5 + 1.5
			this.x = Math.random() * snowfall.canvas.width - this.size - 1 + this.size + 1
			this.baseX = this.x
			this.distance = Math.random() * 50 + 1
			this.opacity = Math.random()
			this.radians = Math.random() * Math.PI * 2
			this.fallSpeed = Math.random() * 1.5 + 0.5
			this.y = Math.random() * snowfall.canvas.height - this.size - 1 + this.size + 1
		}

		draw = () => {
			// Moves snowflakes down the screen, pushing them to the top when they go off the canvas

			if (this.y > snowfall.canvas.height + this.size) {
				this.y = -this.size
			} else {
				this.y += this.fallSpeed
			}
			// Side to side motion on snowflakes
			this.radians += 0.02
			this.x = this.baseX + this.distance * Math.sin(this.radians)

			// Apply the shadow blur for the blurry effect
			snowfall.context.beginPath()
			snowfall.context.arc(this.x, this.y, this.size, 0, Math.PI * 2) // Draws a circle

			// Apply shadow blur and color
			snowfall.context.shadowBlur = 8 // Adjust blur amount
			snowfall.context.shadowColor = `rgba(255, 202, 56, ${this.opacity})` // Shadow color (same as snowflake color)

			snowfall.context.fillStyle = `rgba(255, 202, 56, ${this.opacity})` // Sets the fill color
			snowfall.context.fill() // Fills the circle with the color
			snowfall.context.closePath() // Closes the path

			// Reset the shadow properties for the next frame
			snowfall.context.shadowBlur = 0
			snowfall.context.shadowColor = "transparent"
		}
	}

	// Initial setup function
	snowfall.setup = () => {
		const particleDivisor = 20000 // the higher this number, the lower number of particles
		snowfall.canvas.width = snowfall.context.canvas.clientWidth
		snowfall.canvas.height = snowfall.context.canvas.clientHeight
		snowfall.flakes = []
		for (
			let x = 0;
			x < Math.ceil((snowfall.canvas.width * snowfall.canvas.height) / particleDivisor);
			x++
		) {
			//
			snowfall.flakes.push(new snowfall.snowflake())
		}
	}

	// Animation loop function
	snowfall.animate = () => {
		requestAnimationFrame(snowfall.animate)
		snowfall.context.clearRect(0, 0, snowfall.canvas.width, snowfall.canvas.height)
		for (let snowflake of snowfall.flakes) {
			snowflake.draw()
		}
	}

	// Get the section you want to observe
	const section = document.querySelector("#donate")

	// Set up the IntersectionObserver
	const observer = new IntersectionObserver(
		(entries, observer) => {
			entries.forEach((entry) => {
				// If the section is in view
				if (entry.isIntersecting) {
					if (!glitterStarted) {
						// Call snowfall functions
						snowfall.setup()
						snowfall.animate()
					}

					// Stop observing once the section has entered the viewport
					observer.disconnect()
				}
			})
		},
		{ threshold: 0.25 },
	) // Adjust the threshold as needed (e.g., 50% visibility)

	if (section) {
		observer.observe(section)
	}

	let resizeTimeout: ReturnType<typeof setTimeout> // Dynamically gets the correct type for setTimeout

	// Attach event listener to resize event
	window.addEventListener("resize", () => {
		clearTimeout(resizeTimeout)
		resizeTimeout = setTimeout(() => {
			// Call your setup function here, similar to snowfall.setup
			console.log("Resizing glitter!")
			snowfall.setup()
		}, 200) // 200ms delay after resize stops
	})
</script>

<style>
	#glitter {
		width: 100%;
		height: 100%;
		position: absolute;
		top: 0;
		left: 0;
		opacity: 0.8;
		pointer-events: none;
	}
</style>
